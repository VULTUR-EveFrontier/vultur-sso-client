name: Build and Publish Package

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - master

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.1
          
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        run: pnpm run build
        
      - name: Run tests
        run: pnpm run test:run
        
      - name: Run tests with coverage
        run: pnpm run test:coverage
        if: matrix.node-version == '20'
        
      - name: Upload coverage reports to Codecov
        if: matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        
      - name: Check package contents
        run: |
          echo "Checking what would be published..."
          pnpm publish --dry-run --no-git-checks
          echo ""
          echo "Creating tarball to verify contents..."
          pnpm pack
          echo "Package contents:"
          tar -tzf *.tgz

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build package
        run: pnpm run build
        
      - name: Determine version and tag
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG="latest"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            
            # Update package.json version
            npm version $VERSION --no-git-tag-version
          else
            # Development build - use current version with pre-release identifier
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            COMMIT_SHA=${GITHUB_SHA:0:7}
            DEV_VERSION="$CURRENT_VERSION-dev.$TIMESTAMP.$COMMIT_SHA"
            TAG="dev"
            echo "version=$DEV_VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            
            # Update package.json version
            npm version $DEV_VERSION --no-git-tag-version
          fi
          
      - name: Show package info
        run: |
          echo "Package version: ${{ steps.version.outputs.version }}"
          echo "NPM tag: ${{ steps.version.outputs.tag }}"
          echo "Is release: ${{ steps.version.outputs.is_release }}"
          cat package.json | jq '.version'
          
      - name: Pack package
        run: pnpm pack
        
      - name: Publish to NPM (Release)
        if: steps.version.outputs.is_release == 'true'
        run: pnpm publish --access public --tag ${{ steps.version.outputs.tag }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Publish to NPM (Development)
        if: steps.version.outputs.is_release == 'false'
        run: pnpm publish --access public --tag ${{ steps.version.outputs.tag }} --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release
        if: steps.version.outputs.is_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Changes in v${{ steps.version.outputs.version }}
            
            Published to NPM: https://www.npmjs.com/package/@vultur-evefrontier/vultur-sso-client/v/${{ steps.version.outputs.version }}
            
            ### Installation
            ```bash
            pnpm add @vultur-evefrontier/vultur-sso-client@${{ steps.version.outputs.version }}
            ```
            
            ### Features
            - Next.js endpoint handlers for `.well-known/vultur-permissions`
            - React hooks for client-side permission management
            - Server-side JWT validation and permission checking
            - Full TypeScript support
            
            See [README](https://github.com/${{ github.repository }}/blob/v${{ steps.version.outputs.version }}/README.md) for full documentation.
          draft: false
          prerelease: false
          
      - name: Comment on PR (Development Build)
        if: steps.version.outputs.is_release == 'false' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Development build published**
              
              Version: \`${{ steps.version.outputs.version }}\`
              NPM: https://www.npmjs.com/package/@vultur-evefrontier/vultur-sso-client/v/${{ steps.version.outputs.version }}
              
              Install with:
              \`\`\`bash
              pnpm add @vultur-evefrontier/vultur-sso-client@${{ steps.version.outputs.tag }}
              \`\`\`
              `
            })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true
        
      - name: Check for known vulnerabilities
        run: pnpm audit --audit-level high
